
let handler = async (m, { conn, args, usedPrefix, command }) => {
await global.loading(m, conn)
let fonts = {
1: str => str.normalize('NFKD').split('').map(c => ({
a:'𝒂', b:'𝒃', c:'𝒄', d:'𝒅', e:'𝒆', f:'𝒇', g:'𝒈', h:'𝒉', i:'𝒊', j:'𝒋', k:'𝒌', l:'𝒍', m:'𝒎',
n:'𝒏', o:'𝒐', p:'𝒑', q:'𝒒', r:'𝒓', s:'𝒔', t:'𝒕', u:'𝒖', v:'𝒗', w:'𝒘', x:'𝒙', y:'𝒚', z:'𝒛',
A:'𝑨', B:'𝑩', C:'𝑪', D:'𝑫', E:'𝑬', F:'𝑭', G:'𝑮', H:'𝑯', I:'𝑰', J:'𝑱', K:'𝑲', L:'𝑳', M:'𝑴',
N:'𝑵', O:'𝑶', P:'𝑷', Q:'𝑸', R:'𝑹', S:'𝑺', T:'𝑻', U:'𝑼', V:'𝑽', W:'𝑾', X:'𝑿', Y:'𝒀', Z:'𝒁'
}[c] || c)).join(''),
2: str => str.normalize('NFKD').split('').map(c => ({
a:'𝐚', b:'𝐛', c:'𝐜', d:'𝐝', e:'𝐞', f:'𝐟', g:'𝐠', h:'𝐡', i:'𝐢', j:'𝐣', k:'𝐤', l:'𝐥', m:'𝐦',
n:'𝐧', o:'𝐨', p:'𝐩', q:'𝐪', r:'𝐫', s:'𝐬', t:'𝐭', u:'𝐮', v:'𝐯', w:'𝐰', x:'𝐱', y:'𝐲', z:'𝐳',
A:'𝐀', B:'𝐁', C:'𝐂', D:'𝐃', E:'𝐄', F:'𝐅', G:'𝐆', H:'𝐇', I:'𝐈', J:'𝐉', K:'𝐊', L:'𝐋', M:'𝐌',
N:'𝐍', O:'𝐎', P:'𝐏', Q:'𝐐', R:'𝐑', S:'𝐒', T:'𝐓', U:'𝐔', V:'𝐕', W:'𝐖', X:'𝐗', Y:'𝐘', Z:'𝐙'
}[c] || c)).join(''),
3: str => str.normalize('NFKD').split('').map(c => ({
a:'𝙖', b:'𝙗', c:'𝙘', d:'𝙙', e:'𝙚', f:'𝙛', g:'𝙜', h:'𝙝', i:'𝙞', j:'𝙟', k:'𝙠', l:'𝙡', m:'𝙢',
n:'𝙣', o:'𝙤', p:'𝙥', q:'𝙦', r:'𝙧', s:'𝙨', t:'𝙩', u:'𝙪', v:'𝙫', w:'𝙬', x:'𝙭', y:'𝙮', z:'𝙯',
A:'𝘼', B:'𝘽', C:'𝘾', D:'𝘿', E:'𝙀', F:'𝙁', G:'𝙂', H:'𝙃', I:'𝙄', J:'𝙅', K:'𝙆', L:'𝙇', M:'𝙈',
N:'𝙉', O:'𝙊', P:'𝙋', Q:'𝙌', R:'𝙍', S:'𝙎', T:'𝙏', U:'𝙐', V:'𝙑', W:'𝙒', X:'𝙓', Y:'𝙔', Z:'𝙕'
}[c] || c)).join(''),
4: str => str.normalize('NFKD').split('').map(c => ({
a:'𝓪', b:'𝓫', c:'𝓬', d:'𝓭', e:'𝓮', f:'𝓯', g:'𝓰', h:'𝓱', i:'𝓲', j:'𝓳', k:'𝓴', l:'𝓵', m:'𝓶',
n:'𝓷', o:'𝓸', p:'𝓹', q:'𝓺', r:'𝓻', s:'𝓼', t:'𝓽', u:'𝓾', v:'𝓿', w:'𝔀', x:'𝔁', y:'𝔂', z:'𝔃',
A:'𝓐', B:'𝓑', C:'𝓒', D:'𝓓', E:'𝓔', F:'𝓕', G:'𝓖', H:'𝓗', I:'𝓘', J:'𝓙', K:'𝓚', L:'𝓛', M:'𝓜',
N:'𝓝', O:'𝓞', P:'𝓟', Q:'𝓠', R:'𝓡', S:'𝓢', T:'𝓣', U:'𝓤', V:'𝓥', W:'𝓦', X:'𝓧', Y:'𝓨', Z:'𝓩'
}[c] || c)).join(''),
5: str => str.normalize('NFKD').split('').map(c => ({
a:'𝔞', b:'𝔟', c:'𝔠', d:'𝔡', e:'𝔢', f:'𝔣', g:'𝔤', h:'𝔥', i:'𝔦', j:'𝔧', k:'𝔨', l:'𝔩', m:'𝔪',
n:'𝔫', o:'𝔬', p:'𝔭', q:'𝔮', r:'𝔯', s:'𝔰', t:'𝔱', u:'𝔲', v:'𝔳', w:'𝔴', x:'𝔵', y:'𝔶', z:'𝔷',
A:'𝔄', B:'𝔅', C:'ℭ', D:'𝔇', E:'𝔈', F:'𝔉', G:'𝔊', H:'ℌ', I:'ℑ', J:'𝔍', K:'𝔎', L:'𝔏', M:'𝔐',
N:'𝔑', O:'𝔒', P:'𝔓', Q:'𝔔', R:'ℜ', S:'𝔖', T:'𝔗', U:'𝔘', V:'𝔙', W:'𝔚', X:'𝔛', Y:'𝔜', Z:'ℨ'
}[c] || c)).join(''),
6: str => str.normalize('NFKD').split('').map(c => ({
a:'ᴀ', b:'ʙ', c:'ᴄ', d:'ᴅ', e:'ᴇ', f:'ғ', g:'ɢ', h:'ʜ', i:'ɪ', j:'ᴊ', k:'ᴋ', l:'ʟ', m:'ᴍ',
n:'ɴ', o:'ᴏ', p:'ᴘ', q:'ǫ', r:'ʀ', s:'s', t:'ᴛ', u:'ᴜ', v:'ᴠ', w:'ᴡ', x:'x', y:'ʏ', z:'ᴢ',
A:'A', B:'B', C:'C', D:'D', E:'E', F:'F', G:'G', H:'H', I:'I', J:'J', K:'K', L:'L', M:'M',
N:'N', O:'O', P:'P', Q:'Q', R:'R', S:'S', T:'T', U:'U', V:'V', W:'W', X:'X', Y:'Y', Z:'Z'
}[c] || c)).join(''),
7: str => str.normalize('NFKD').split('').map(c => ({
a:'🅐', b:'🅑', c:'🅒', d:'🅓', e:'🅔', f:'🅕', g:'🅖', h:'🅗', i:'🅘', j:'🅙', k:'🅚', l:'🅛', m:'🅜',
n:'🅝', o:'🅞', p:'🅟', q:'🅠', r:'🅡', s:'🅢', t:'🅣', u:'🅤', v:'🅥', w:'🅦', x:'🅧', y:'🅨', z:'🅩',
A:'🅐', B:'🅑', C:'🅒', D:'🅓', E:'🅔', F:'🅕', G:'🅖', H:'🅗', I:'🅘', J:'🅙', K:'🅚', L:'🅛', M:'🅜',
N:'🅝', O:'🅞', P:'🅟', Q:'🅠', R:'🅡', S:'🅢', T:'🅣', U:'🅤', V:'🅥', W:'🅦', X:'🅧', Y:'🅨', Z:'🅩'
}[c] || c)).join(''),
8: str => str.normalize('NFKD').split('').map(c => ({
a:'α', b:'в', c:'¢', d:'∂', e:'є', f:'ƒ', g:'g', h:'н', i:'ι', j:'נ', k:'к', l:'ℓ', m:'м',
n:'η', o:'σ', p:'ρ', q:'q', r:'я', s:'ѕ', t:'т', u:'υ', v:'ν', w:'ω', x:'χ', y:'у', z:'z',
A:'Λ', B:'B', C:'C', D:'D', E:'Σ', F:'F', G:'G', H:'H', I:'I', J:'J', K:'K', L:'L', M:'M',
N:'И', O:'Θ', P:'P', Q:'Q', R:'R', S:'S', T:'T', U:'Ц', V:'V', W:'Ш', X:'X', Y:'Y', Z:'Z'
}[c] || c)).join(''),
9: str => str.normalize('NFKD').split('').map(c => ({
a:'ą', b:'ҍ', c:'ç', d:'ժ', e:'ҽ', f:'ƒ', g:'ց', h:'հ', i:'ì', j:'ʝ', k:'ҟ', l:'Ӏ', m:'ʍ',
n:'ռ', o:'օ', p:'ք', q:'զ', r:'ɾ', s:'ʂ', t:'է', u:'մ', v:'ѵ', w:'ա', x:'×', y:'ყ', z:'z',
A:'Ⱥ', B:'β', C:'Ↄ', D:'Ð', E:'Ɛ', F:'Ƒ', G:'Ɠ', H:'Һ', I:'Ɩ', J:'ʝ', K:'Ҡ', L:'Ⱡ', M:'Ɱ',
N:'Ո', O:'Ө', P:'Ƥ', Q:'Ⴓ', R:'Ʀ', S:'Ϟ', T:'Ͳ', U:'Ս', V:'Ʋ', W:'Ԝ', X:'Ҳ', Y:'Ϥ', Z:'Ƶ'
}[c] || c)).join(''),
10: str => str.normalize('NFKD').split('').map(c => ({
a:'ᵃ', b:'ᵇ', c:'ᶜ', d:'ᵈ', e:'ᵉ', f:'ᶠ', g:'ᵍ', h:'ʰ', i:'ⁱ', j:'ʲ', k:'ᵏ', l:'ˡ', m:'ᵐ',
n:'ⁿ', o:'ᵒ', p:'ᵖ', q:'ᑫ', r:'ʳ', s:'ˢ', t:'ᵗ', u:'ᵘ', v:'ᵛ', w:'ʷ', x:'ˣ', y:'ʸ', z:'ᶻ',
A:'ᴬ', B:'ᴮ', C:'ᶜ', D:'ᴰ', E:'ᴱ', F:'ᶠ', G:'ᴳ', H:'ᴴ', I:'ᴵ', J:'ᴶ', K:'ᴷ', L:'ᴸ', M:'ᴹ',
N:'ᴺ', O:'ᴼ', P:'ᴾ', Q:'Q', R:'ᴿ', S:'ˢ', T:'ᵀ', U:'ᵁ', V:'ⱽ', W:'ᵂ', X:'ˣ', Y:'ʸ', Z:'ᶻ'
}[c] || c)).join(''),
11: str => str.normalize('NFKD').split('').map(c => ({
a:'ᗩ', b:'ᗷ', c:'ᑕ', d:'ᗪ', e:'ᗴ', f:'ᖴ', g:'G', h:'ᕼ', i:'I', j:'ᒍ', k:'K', l:'ᒪ', m:'ᗰ',
n:'ᑎ', o:'O', p:'ᑭ', q:'Q', r:'ᖇ', s:'S', t:'T', u:'ᑌ', v:'ᐯ', w:'ᗯ', x:'᙭', y:'Y', z:'ᘔ',
A:'ᗩ', B:'ᗷ', C:'ᑕ', D:'ᗪ', E:'ᗴ', F:'ᖴ', G:'G', H:'ᕼ', I:'I', J:'ᒍ', K:'K', L:'ᒪ', M:'ᗰ',
N:'ᑎ', O:'O', P:'ᑭ', Q:'Q', R:'ᖇ', S:'S', T:'T', U:'ᑌ', V:'ᐯ', W:'ᗯ', X:'᙭', Y:'Y', Z:'ᘔ'
}[c] || c)).join(''),
12: str => str.normalize('NFKD').split('').map(c => ({
a:'ꋫ', b:'ꃃ', c:'ꉓ', d:'ꀷ', e:'ꍟ', f:'ꄘ', g:'ꁅ', h:'ꃅ', i:'ꀤ', j:'꒻', k:'ꀎ', l:'꒒', m:'ꂵ',
n:'ꈤ', o:'ꂦ', p:'ꁒ', q:'ꆰ', r:'ꋪ', s:'ꌚ', t:'꓄', u:'ꐇ', v:'꒦', w:'ꅐ', x:'ꊼ', y:'ꌩ', z:'ꁴ',
A:'ꋫ', B:'ꃃ', C:'ꉓ', D:'ꀷ', E:'ꍟ', F:'ꄘ', G:'ꁅ', H:'ꃅ', I:'ꀤ', J:'꒻', K:'ꀎ', L:'꒒', M:'ꂵ',
N:'ꈤ', O:'ꂦ', P:'ꁒ', Q:'ꆰ', R:'ꋪ', S:'ꌚ', T:'꓄', U:'ꐇ', V:'꒦', W:'ꅐ', X:'ꊼ', Y:'ꌩ', Z:'ꁴ'
}[c] || c)).join(''),
13: str => str.normalize('NFKD').split('').map(c => ({
a:'𝕒', b:'𝕓', c:'𝕔', d:'𝕕', e:'𝕖', f:'𝕗', g:'𝕘', h:'𝕙', i:'𝕚', j:'𝕛', k:'𝕜', l:'𝕝', m:'𝕞',
n:'𝕟', o:'𝕠', p:'𝕡', q:'𝕢', r:'𝕣', s:'𝕤', t:'𝕥', u:'𝕦', v:'𝕧', w:'𝕨', x:'𝕩', y:'𝕪', z:'𝕫',
A:'𝔸', B:'𝔹', C:'ℂ', D:'𝔻', E:'𝔼', F:'𝔽', G:'𝔾', H:'ℍ', I:'𝕀', J:'𝕁', K:'𝕂', L:'𝕃', M:'𝕄',
N:'ℕ', O:'𝕆', P:'ℙ', Q:'ℚ', R:'ℝ', S:'𝕊', T:'𝕋', U:'𝕌', V:'𝕍', W:'𝕎', X:'𝕏', Y:'𝕐', Z:'ℤ'
}[c] || c)).join(''),
14: str => str.normalize('NFKD').split('').map(c => ({
a:'α', b:'в', c:'¢', d:'∂', e:'є', f:'ƒ', g:'g', h:'н', i:'ι', j:'נ', k:'к', l:'ℓ', m:'м',
n:'η', o:'σ', p:'ρ', q:'q', r:'я', s:'ѕ', t:'т', u:'υ', v:'ν', w:'ω', x:'χ', y:'у', z:'z',
A:'Α', B:'Β', C:'Ϲ', D:'Đ', E:'Ɛ', F:'F', G:'Ɠ', H:'Η', I:'Ι', J:'J', K:'Ƙ', L:'ᒪ', M:'Μ',
N:'Ɲ', O:'Ơ', P:'Ƥ', Q:'Q', R:'Я', S:'Ƨ', T:'Ƭ', U:'Ʋ', V:'V', W:'Ŵ', X:'Χ', Y:'Ψ', Z:'Ƶ'
}[c] || c)).join(''),
15: str => str.normalize('NFKD').split('').map(c => ({
a:'卂', b:'乃', c:'匚', d:'刀', e:'乇', f:'下', g:'厶', h:'卄', i:'工', j:'丁', k:'长', l:'ㄥ', m:'从',
n:'𠘨', o:'口', p:'尸', q:'㔿', r:'尺', s:'丂', t:'丅', u:'凵', v:'リ', w:'山', x:'乂', y:'ㄚ', z:'乙',
A:'卂', B:'乃', C:'匚', D:'刀', E:'乇', F:'下', G:'厶', H:'卄', I:'工', J:'丁', K:'长', L:'ㄥ', M:'从',
N:'𠘨', O:'口', P:'尸', Q:'㔿', R:'尺', S:'丂', T:'丅', U:'凵', V:'リ', W:'山', X:'乂', Y:'ㄚ', Z:'乙'
}[c] || c)).join(''),
}
try {
let text = args.slice(1).join(" ")
let type = args[0]
if (!type || !text) {
let preview = Object.entries(fonts).map(([key, fn]) => `*${key}. ${fn('Naruya Izumi')}*`).join('\n')
return m.reply(`🍧 *Pilih Gaya Font:*\n\n${preview}\n\n🚀 *Contoh: ${usedPrefix + command} 1 halo kak*`)
}
let format = fonts[type]
if (!format) {
let available = Object.keys(fonts).join(', ')
return m.reply(`❌ *Font tidak tersedia!*\n📌 *Gunakan angka antara: ${available}*`)
}
m.reply(`✨ *Hasil format:* \n*${format(text)}*`)
} catch (e) {
m.reply("❌ *Terjadi kesalahan saat memformat.*")
} finally {
await global.loading(m, conn, true)
}
}

handler.help = ['font']
handler.tags = ['tools']
handler.command = /^(font)$/i
handler.register = true

export default handler